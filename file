CART MODEL
from django.db import models
from shop.models import Product, Category
from django.shortcuts import reverse
# Create your models here.

class Cart(models.Model):
    product = models.ForeignKey(Product, on_delete ='model.CASCADE')
    cart_id = models.CharField(max_length = 50)
    quantity = models.IntegerField(default= 0)
    date_added= models.DateField()

    class Meta:
        db_table = 'Cart'
        ordering = ('-date_added',)

    def __str__(self):
        return self.product.name

    def item_total(self):
        return self.quantity * self.product.price

    def price(self):
        return self.product.price

    def get_absolute_url(self):
        return self.product.get_absolute_url()
    def argument_quantity(self, quantity):
        self.quantity = self.quantity + int(quantity)
        self.save()
        
    



CART FORM
from django import forms

class ProductFormAdmin(forms.Form):
    quantity = forms.IntegerField(widget = forms.TextInput(attrs={'size': 1,
        'value': 1, 'class' : 'quantity', 'maxlength': 5}),
    error_message = {'invalid': 'This place must be filled with a postive integer value'},min_value = 1)
    product_slug = forms.CharField(widget = forms.HiddenInput())

    def __init__(self, request = None, *args, **kwargs):
        self.request = request
        super(ProductFormAdmin, request).__init__(*args, **kwargs)

    def clean(self):
        if self.request:
            if not self.request.session.test_cookie_worked():
                raise forms.ValidationError('Your cookie must be enabled')
        return self._clean_data



CART.py
from django.shortcuts import render, get_object_or_404
from .models import Cart
from shop.models import Product, Category
from django.http import HttpResponse
import random

CART_ID_SESSION_KEY = 'cart_id'

def _cart_id(request):
    if request.session.get(CART_ID_SESSION_KEY, '') == '':
        request.session[CART_ID_SESSION_KEY] = _generate_cart_id()
    return request.session[CART_ID_SESSION_KEY]

def _generate_cart_id():
    cart_id = ''
    character = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghij\
        klmnopqrstuvwxyz1234567890!@$%^&*()#'
    cart_id_length = 50
    for y in range(cart_id_length):
        cart_id = character[random.randint(0, len(character) -1)]
    return cart_id

def get_cart_items(request):
    return Cart.objects.filter(cart_id = cart_id(request))


def add_to_cart(request):
  postdata = request.POST.copy()                    #get a copy of the POST product
  product_slug = postdata.get('product_slug', '')   #get  the product slug
  quantity = postdata.get('quantity', 1)            #get the quantity for a product, return 1 if empty
  p = get_object_or_404(Product, slug = product_slug) #get the product slug & detail, from the Prod model 
  cart_products = get_cart_items(request)            #check oif product is already in cart 
  product_in_cart = False                             
  for item in cart_products:                          #loop through the cart product if YES
      if item.product.id = p.id:                       #assign cart product id to Model product id
          cart_products.argument_quantity(quantity)     
          product_in_cart = True                        
    if not product_in_cart:                             #if no product in cart add fresh product
        ci = Cart()                                     
        ci.product = p
        ci.quantity = quantity
        ci.cart_id = cart_id(request)
        ci.save()                                       #save assigned product

def item_count(request):
    return get_cart_items(request).count()






CART VIEW 
from django.shortcuts import render

# Create your views here.

def show_cart(request):
    cart_item_count = cart.cart_item_count(request)
    return render(request, 'shop/add_cart.html', {'cart_item_count': cart_item_count})




SHOW PRODUCT

def show_product(request, product_slug):
    p = get_list_or_404(Product, slug = product_slug)
    category = p.category.all()
    if request.method == 'POST':
        form = ProductFormAdmin(request, postdata)
        if form.is_valid():
            cart.add_to_cart(request)
            if request.session.test_cookie_worked():
                request.session.delete_test_cookies()
            url = urlresolvers.reverse('show_product')
            return HttpResponseRedirect(url)
    else:
        form = ProductFormAdmin(request=request, label_suffix = ': ')
    form.fields['product_slug'].widget.attrs['value'] = product_slug
    request.session.set_test_cookie()
    return render(request, 'shop/product-detail.html', locals())   




